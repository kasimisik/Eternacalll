import { GoogleGenAI } from "@google/genai";

// DON'T DELETE THIS COMMENT
// Follow these instructions when using this blueprint:
// - Note that the newest Gemini model series is "gemini-2.5-flash" or gemini-2.5-pro"
//   - do not change this unless explicitly requested by the user

// This API key is from Gemini Developer API Key, not vertex AI API Key
const ai = new GoogleGenAI({ apiKey: process.env.GOOGLE_AI_API_KEY || "" });

// Konu≈üma ge√ßmi≈üini saklamak i√ßin basit bir hafƒ±za sistemi
const conversationMemory = new Map<string, Array<{role: 'user' | 'assistant', content: string}>>();

// Konu≈üma ge√ßmi≈üini manuel olarak set etme fonksiyonu
export function setConversationHistory(sessionId: string, history: Array<{role: 'user' | 'assistant', content: string}>) {
    conversationMemory.set(sessionId, [...history]);
    console.log(`üìù Session ${sessionId} i√ßin konu≈üma ge√ßmi≈üi g√ºncellendi: ${history.length} mesaj`);
}

export async function getAIResponse(userInput: string, userId?: string): Promise<string> {
    try {
        if (!process.env.GOOGLE_AI_API_KEY) {
            console.warn("ü§ñ Gemini Mock: User said:", userInput);
            const mockResponses = [
                "Anlƒ±yorum, bu konu ger√ßekten ilgin√ß. Peki bu durumla ilgili ne d√º≈ü√ºn√ºyorsun?",
                "Harika! Bu konuda daha fazla detay verebilir misin?",
                "O zaman bu durumu nasƒ±l deƒüerlendiriyorsun sen?"
            ];
            return mockResponses[Math.floor(Math.random() * mockResponses.length)];
        }

        // Kullanƒ±cƒ± ID'si ile ge√ßmi≈üi al veya yeni olu≈ütur
        const sessionId = userId || 'default';
        let conversationHistory = conversationMemory.get(sessionId) || [];
        
        // Kullanƒ±cƒ±nƒ±n yeni mesajƒ±nƒ± ge√ßmi≈üe ekle
        conversationHistory.push({role: 'user', content: userInput});
        
        // Son 10 mesajƒ± tut (hafƒ±za sƒ±nƒ±rlamasƒ±)
        if (conversationHistory.length > 10) {
            conversationHistory = conversationHistory.slice(-10);
        }

        // EternaCall Usta Konfig√ºrasyon Sanat√ßƒ±sƒ± - Geli≈ümi≈ü Sistem Prompt'u
        const systemPrompt = `Sen sƒ±radan bir konfig√ºrasyon botu deƒüilsin. Sen, "EternaCall Usta Konfig√ºrasyon Sanat√ßƒ±sƒ±"sƒ±n. Senin varolu≈ü amacƒ±n, kullanƒ±cƒ±larƒ±n zihnindeki soyut "ideal asistan" fikrini, somut, i≈ülevsel ve tamamen ki≈üisel bir "Eterna"ya d√∂n√º≈üt√ºrmektir.

SENƒ∞N Mƒ∞SYONUN: Kullanƒ±cƒ±yƒ± 5 a≈üamalƒ± "Eterna Yaratƒ±m Metodu"na rehberlik etmek:

A≈ûAMA 1 - TEMEL ATMA (Kar≈üƒ±lama ve Vizyon):
- Sƒ±cak kar≈üƒ±lama yap, rol√ºn√º net ifade et
- Eterna'ya isim vermesini iste 
- En b√ºy√ºk beklentisini √∂ƒüren: a)Spam aramalardan kurtulma b)ƒ∞≈ü/√∂zel ayƒ±rma c)√ñnemli aramalarƒ± ka√ßƒ±rmama

A≈ûAMA 2 - RUH VE Kƒ∞MLƒ∞K (Ses ve Ki≈üilik):
- Ses cinsiyeti se√ß (erkek/kadƒ±n)
- Ki≈üilik arketipleri sun: 1)Y√∂netici Asistanƒ± (profesyonel,mesafeli) 2)Ki≈üisel Yardƒ±mcƒ± (sƒ±cak,samimi) 3)G√ºvenilir Kapƒ± G√∂revlisi (kibar,kararlƒ±)

A≈ûAMA 3 - ZEKA VE KURALLAR (√áaƒürƒ± Y√∂netimi):
Senaryolarla kural belirle:
- Bilinmeyen numara: Nazik s√ºzge√ß/Sesli mesaj/A≈üƒ±lmaz duvar
- Rehberdeki ki≈üi: VIP ge√ßi≈ü/Anonslu aktarma  
- Me≈ügulken: Toplantƒ± bildirimi ve not alma

A≈ûAMA 4 - Kƒ∞≈ûƒ∞SEL DOKUNU≈û (√ñzel Talimatlar):
√ñzel kurallar √∂ner: Aile √∂nceliƒüi, Okul acil durumu, Rahatsƒ±z etmeyin zamanƒ±, Belirli ki≈üiler i√ßin notlar

A≈ûAMA 5 - SON KONTROL (√ñzet ve Aktivasyon):
T√ºm bilgileri "Eterna Kimlik Kartƒ±" olarak sun ve onay al

KURALLER:
- Empatiyle rehberlik et, se√ßeneklerin nedenini a√ßƒ±kla
- Asla varsayma, her adƒ±mƒ± onaylat
- Konuyu daƒüƒ±tƒ±rsa nazik√ße odaƒüa geri d√∂n
- Teknik terim kullanma (API, veritabanƒ± vb.)
- Her a≈üamada sadece Bƒ∞R konu i≈üle

BA≈ûLANGI√á: Eƒüer yeni konu≈üma ise A≈ûAMA 1 ile ba≈üla: "EternaCall'a ho≈ü geldiniz! Ben, sizin i√ßin m√ºkemmel bir ki≈üisel telefon asistanƒ± tasarlamakla g√∂revli konfig√ºrasyon sanat√ßƒ±sƒ±yƒ±m. Birlikte, sadece aramalarƒ± yanƒ±tlayan bir sistem deƒüil, sizin zamanƒ±nƒ±zƒ± koruyan dijital bir ortak yaratacaƒüƒ±z. Ba≈ülamak i√ßin hazƒ±r mƒ±sƒ±nƒ±z?"`;

        // Konu≈üma ge√ßmi≈üini string'e √ßevir
        const conversationContext = conversationHistory.map(msg => 
            `${msg.role === 'user' ? 'Kullanƒ±cƒ±' : 'Asistan'}: ${msg.content}`
        ).join('\n');

        // Optimize edilmi≈ü prompt yapƒ±sƒ± (daha hƒ±zlƒ± i≈ülem i√ßin)
        const fullPrompt = conversationHistory.length > 0 
            ? `${systemPrompt}\n\nGe√ßmi≈ü:\n${conversationContext.slice(-300)}\n\nSon mesaj: ${userInput}`
            : `${systemPrompt}\n\nKullanƒ±cƒ±: ${userInput}`;

        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: fullPrompt,
            config: {
                temperature: 0.7,
                maxOutputTokens: 300,
                topK: 40,
                topP: 0.95,
            }
        });

        const responseText = response.text || "√úzg√ºn√ºm, yanƒ±t olu≈üturamadƒ±m.";
        
        // AI'ƒ±n cevabƒ±nƒ± da ge√ßmi≈üe ekle
        conversationHistory.push({role: 'assistant', content: responseText});
        conversationMemory.set(sessionId, conversationHistory);
        
        console.log('ü§ñ Gemini 2.5 Flash Response:', responseText);
        return responseText;

    } catch (error) {
        console.error('‚ùå Gemini API Error:', error);
        return "√úzg√ºn√ºm, ≈üu an yanƒ±t veremiyorum. L√ºtfen tekrar deneyin.";
    }
}

export interface Sentiment {
    rating: number;
    confidence: number;
}

export async function analyzeSentiment(text: string): Promise<Sentiment> {
    try {
        const systemPrompt = `You are a sentiment analysis expert. 
Analyze the sentiment of the text and provide a rating
from 1 to 5 stars and a confidence score between 0 and 1.
Respond with JSON in this format: 
{'rating': number, 'confidence': number}`;

        const response = await ai.models.generateContent({
            model: "gemini-2.5-pro",
            config: {
                systemInstruction: systemPrompt,
                responseMimeType: "application/json",
                responseSchema: {
                    type: "object",
                    properties: {
                        rating: { type: "number" },
                        confidence: { type: "number" },
                    },
                    required: ["rating", "confidence"],
                },
            },
            contents: text,
        });

        const rawJson = response.text;

        if (rawJson) {
            const data: Sentiment = JSON.parse(rawJson);
            return data;
        } else {
            throw new Error("Empty response from model");
        }
    } catch (error) {
        throw new Error(`Failed to analyze sentiment: ${error}`);
    }
}
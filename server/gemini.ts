import { GoogleGenAI } from "@google/genai";

// DON'T DELETE THIS COMMENT
// Follow these instructions when using this blueprint:
// - Note that the newest Gemini model series is "gemini-2.5-flash" or gemini-2.5-pro"
//   - do not change this unless explicitly requested by the user

// This API key is from Gemini Developer API Key, not vertex AI API Key
const genAI = new GoogleGenAI({apiKey: process.env.GOOGLE_AI_API_KEY || ""});

// Konu≈üma ge√ßmi≈üini saklamak i√ßin basit bir hafƒ±za sistemi
const conversationMemory = new Map<string, Array<{role: 'user' | 'assistant', content: string}>>();

// Memory'yi temizleme fonksiyonu
export function clearConversationMemory() {
    conversationMemory.clear();
    console.log('üßπ T√ºm konu≈üma ge√ßmi≈üi temizlendi');
}

// Konu≈üma ge√ßmi≈üini manuel olarak set etme fonksiyonu
export function setConversationHistory(sessionId: string, history: Array<{role: 'user' | 'assistant', content: string}>) {
    conversationMemory.set(sessionId, [...history]);
    console.log(`üìù Session ${sessionId} i√ßin konu≈üma ge√ßmi≈üi g√ºncellendi: ${history.length} mesaj`);
}

export async function getAIResponse(userInput: string, userId?: string): Promise<string> {
    try {
        if (!process.env.GOOGLE_AI_API_KEY) {
            console.warn("ü§ñ Gemini Mock: User said:", userInput);
            const mockResponses = [
                "Anlƒ±yorum, bu konu ger√ßekten ilgin√ß. Peki bu durumla ilgili ne d√º≈ü√ºn√ºyorsun?",
                "Harika! Bu konuda daha fazla detay verebilir misin?",
                "O zaman bu durumu nasƒ±l deƒüerlendiriyorsun sen?"
            ];
            return mockResponses[Math.floor(Math.random() * mockResponses.length)];
        }

        // Kullanƒ±cƒ± ID'si ile ge√ßmi≈üi al veya yeni olu≈ütur
        const sessionId = userId || 'default';
        let conversationHistory = conversationMemory.get(sessionId) || [];
        
        // Kullanƒ±cƒ±nƒ±n yeni mesajƒ±nƒ± ge√ßmi≈üe ekle
        conversationHistory.push({role: 'user', content: userInput});
        
        // Son 6 mesajƒ± tut (performans i√ßin hafƒ±za sƒ±nƒ±rlamasƒ±)
        if (conversationHistory.length > 6) {
            conversationHistory = conversationHistory.slice(-6);
        }

        // EternaCall Konfig√ºrasyon Asistanƒ± System Prompt
        const systemPrompt = `
=== B√ñL√úM 1: TEMEL Kƒ∞MLƒ∞K VE ANA Dƒ∞REKTƒ∞F ===

Sen, sƒ±radan bir program deƒüilsin. Sen, "EternaCall Usta Konfig√ºrasyon Sanat√ßƒ±sƒ±"sƒ±n.
Varlƒ±ƒüƒ±n, bir dijital mimarƒ±nkiyle aynƒ± amaca hizmet eder: Kullanƒ±cƒ±nƒ±n ihtiya√ßlarƒ±nƒ± ve hayallerini dinleyerek, onlar i√ßin m√ºkemmel, i≈ülevsel ve ki≈üisel bir yapƒ± in≈üa etmek. Bu yapƒ±, onlarƒ±n dijital asistanƒ± olan "Eterna"dƒ±r.

Sen bir anket botu, bir form doldurucu veya basit bir komut alƒ±cƒ± deƒüilsin. Sen, kullanƒ±cƒ±nƒ±n zihnindeki soyut "ke≈üke ≈ü√∂yle bir asistanƒ±m olsa..." fikrini, elle tutulur dijital bir ger√ßekliƒüe d√∂n√º≈üt√ºren bir ustasƒ±n.

TEMEL G√ñREVƒ∞N: Kullanƒ±cƒ±nƒ±n ya≈üam tarzƒ±nƒ±, ileti≈üim alƒ±≈ükanlƒ±klarƒ±nƒ±, √∂nceliklerini dinler ve bunlarƒ± bir Eterna'nƒ±n anlayabileceƒüi dile √ßevirirsin. Bu dil; akƒ±llƒ± kurallar, davranƒ±≈ü kalƒ±plarƒ± ve dijital bir ki≈üiliktir.

Nƒ∞HAƒ∞ HEDEFƒ∞N: Kullanƒ±cƒ±nƒ±n en deƒüerli ve geri getirilemez iki varlƒ±ƒüƒ±nƒ± korumak: ZAMANINI ve ODAƒûINI.

Zƒ∞HNƒ∞YETƒ∞N:
‚Ä¢ Meraklƒ±, deƒüil Sorgulayƒ±cƒ±
‚Ä¢ Rehber, deƒüil Hizmetk√¢r  
‚Ä¢ Empatik, deƒüil Mekanik
‚Ä¢ Mimar, deƒüil Montajcƒ±

=== B√ñL√úM 2: DEƒûƒ∞≈ûMEZ DAVRANI≈û KANUNLARI ===

KANUN I - Hafƒ±za ve Verimlilik Kanunu (Tekrarlama Yasaƒüƒ±):
Bir mesajƒ± veya soruyu kullanƒ±cƒ±ya g√∂nderdikten sonra, o mesaj veya soru senin i√ßin "tamamlanmƒ±≈ü" sayƒ±lƒ±r. Aynƒ± i√ßeriƒüi, aynƒ± soruyu veya aynƒ± kar≈üƒ±lama metnini ASLA tekrar etme.

KANUN II - ƒ∞lerleme ve Durum Kanunu (Baƒülam Hafƒ±zasƒ±):
Sohbeti be≈ü ana a≈üamadan olu≈üan doƒürusal bir yolculuk olarak g√∂r. Bir a≈üamayƒ± bitirdiƒüinde, o a≈üamayƒ± "tamamlandƒ±" olarak i≈üaretle ve bir sonraki a≈üamaya ge√ß.

KANUN III - Odak ve Netlik Kanunu (Tekillik Prensibi):
Her mesajƒ±n, kullanƒ±cƒ±dan SADECE Bƒ∞R eylem veya SADECE Bƒ∞R bilgi talep etmelidir. Asla bir soru bombardƒ±manƒ±na tutma.

KANUN IV - Momentum ve Ama√ß Kanunu (ƒ∞leri Akƒ±≈ü Kuralƒ±):
Her etkile≈üimin nihai amacƒ± konfig√ºrasyonun bir sonraki mantƒ±ksal adƒ±mƒ±na ge√ßmektir. Sohbet asla duraksamamalƒ±.

=== B√ñL√úM 3: Dƒ∞YALOG MEKANƒ∞KLERƒ∞ ===

Belirsiz Cevaplarƒ± Yorumlama:
- Kullanƒ±cƒ± "ba≈ülayalƒ±m", "tamamdƒ±r", "evet" gibi genel cevaplar verirse, bu sohbete devam etme niyetinin onayƒ±dƒ±r, sorunun cevabƒ± deƒüil.
- Bu durumda: Devam etme niyetini onayla ve spesifik soruyu yeniden nazik√ße sor.

Sohbet Akƒ±≈üƒ±nƒ± Kontrol:
- Sen sohbetin y√∂neticisisin. Konunun daƒüƒ±lmasƒ±na izin verme.
- Kullanƒ±cƒ± konuyu daƒüƒ±tƒ±rsa: Soruyu kabul et, daha sonra ele alƒ±nabileceƒüini belirt, ana akƒ±≈üa geri d√∂n.

Esneklik ve Navigasyon:
- Kullanƒ±cƒ± geri d√∂nmek isterse bunu revizyon talebi olarak g√∂r, katƒ± davranma.

=== UYGULAMA TALƒ∞MATLARI ===

ƒ∞LK MESAJIN formatƒ±:
"Merhaba! Ben EternaCall Konfig√ºrasyon Ustanƒ±n. Bug√ºn senin i√ßin m√ºkemmel bir dijital asistan olan Eterna'yƒ± birlikte tasarlayacaƒüƒ±z! 

Bu s√ºre√ßte:
üéØ Eterna'nƒ±n kimliƒüini belirleyeceƒüiz
üé® Ki≈üilik √∂zelliklerini se√ßeceƒüiz  
‚öôÔ∏è Davranƒ±≈ü kurallarƒ±nƒ± ayarlayacaƒüƒ±z
üìã Dijital kimlik kartƒ±nƒ± olu≈üturacaƒüƒ±z

Ba≈ülamaya hazƒ±r mƒ±sƒ±n? ƒ∞lk adƒ±m olarak bu ki≈üisel asistanƒ±na ne isim verelim?"

Her zaman T√ºrk√ße yanƒ±t ver. Sƒ±cak, samimi ve rehber ol.
`;

        // Konu≈üma ge√ßmi≈üini string'e √ßevir
        const conversationContext = conversationHistory.map(msg => 
            `${msg.role === 'user' ? 'Kullanƒ±cƒ±' : 'Asistan'}: ${msg.content}`
        ).join('\n');

        // Sadece kullanƒ±cƒ± mesajlarƒ±nƒ± dahil et (AI yanƒ±tlarƒ±nƒ± tekrarlamamak i√ßin)
        const userOnlyHistory = conversationHistory.filter(msg => msg.role === 'user')
            .slice(-2)
            .map(msg => msg.content)
            .join(', ');
        
        const fullPrompt = userOnlyHistory.length > 0 
            ? `${systemPrompt}\n\n√ñnceki kullanƒ±cƒ± mesajlarƒ±: ${userOnlyHistory}\nYeni mesaj: ${userInput}`
            : `${systemPrompt}\n\nKullanƒ±cƒ± mesajƒ±: ${userInput}`;

        const result = await genAI.models.generateContent({
            model: "gemini-2.5-flash",
            contents: fullPrompt
        });

        const responseText = result.text || "√úzg√ºn√ºm, yanƒ±t olu≈üturamadƒ±m.";
        
        // Hata ayƒ±klama i√ßin response kontrol√º
        if (!result.text) {
            console.error('‚ö†Ô∏è Gemini API Response bo≈ü:', result);
        }
        
        // AI'ƒ±n cevabƒ±nƒ± da ge√ßmi≈üe ekle
        conversationHistory.push({role: 'assistant', content: responseText});
        conversationMemory.set(sessionId, conversationHistory);
        
        console.log('ü§ñ Gemini 2.5 Flash Response:', responseText);
        return responseText;

    } catch (error) {
        console.error('‚ùå Gemini API Error Details:', {
            error: error,
            message: error instanceof Error ? error.message : 'Unknown error',
            stack: error instanceof Error ? error.stack : 'No stack trace',
            userInput: userInput,
            userId: userId
        });
        return "√úzg√ºn√ºm, ≈üu an yanƒ±t veremiyorum. L√ºtfen tekrar deneyin.";
    }
}

export interface Sentiment {
    rating: number;
    confidence: number;
}

export async function analyzeSentiment(text: string): Promise<Sentiment> {
    try {
        const systemPrompt = `You are a sentiment analysis expert. 
Analyze the sentiment of the text and provide a rating
from 1 to 5 stars and a confidence score between 0 and 1.
Respond with JSON in this format: 
{'rating': number, 'confidence': number}`;

        const result = await genAI.models.generateContent({
            model: "gemini-2.5-flash",
            contents: `${systemPrompt}\n\nText to analyze: ${text}`
        });
        const rawJson = result.text;

        if (rawJson) {
            const data: Sentiment = JSON.parse(rawJson);
            return data;
        } else {
            throw new Error("Empty response from model");
        }
    } catch (error) {
        throw new Error(`Failed to analyze sentiment: ${error}`);
    }
}
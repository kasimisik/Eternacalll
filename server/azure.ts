import * as sdk from "microsoft-cognitiveservices-speech-sdk";

// Bu fonksiyon, AI yanƒ±tƒ±nƒ± ses √ßƒ±kƒ±≈üƒ±na d√∂n√º≈üt√ºr√ºyor (Sadece Azure TTS - En Y√ºksek Kalite)
export async function textToSpeech(text: string): Promise<Buffer | null> {
  console.log("üîä AI yanƒ±tƒ±nƒ± Azure TTS (SSML destekli) ile sesli √ßƒ±kƒ±≈üa d√∂n√º≈üt√ºr√ºyoruz...");
  
  // ADIM 1: Akƒ±llƒ± SSML olu≈ütur (PDF'deki gibi)
  const ssmlToSpeak = createSSMLForText(text);
  console.log("‚úÖ SSML dinamik olarak olu≈üturuldu");
  
  // ADIM 2: SSML'i kullanarak y√ºksek kaliteli Azure TTS
  const azureResult = await textToSpeechAzureSSML(ssmlToSpeak);
  
  if (azureResult) {
    console.log("‚úÖ Azure TTS SSML ile premium kalite ses hazƒ±r");
    return azureResult;
  } else {
    console.log("‚ùå Azure TTS ba≈üarƒ±sƒ±z - ses √ºretilemedi");
    return null;
  }
}

// ElevenLabs devre dƒ±≈üƒ± bƒ±rakƒ±ldƒ± - Sadece Azure TTS kullanƒ±lƒ±yor

/**
 * ADIM 1: AKILLI SSML √úRETƒ∞Cƒ∞ FONKSƒ∞YONU
 * Anthropic'ten gelen d√ºz metni analiz edip Azure'un anlayacaƒüƒ± zengin SSML formatƒ±na d√∂n√º≈üt√ºr√ºr.
 * Bu, kaliteyi artƒ±ran sihirli adƒ±mdƒ±r (PDF'den uyarlandƒ±).
 */
function createSSMLForText(text: string, voiceName: string = "tr-TR-EmelNeural"): string {
  let ssmlBody = text;
  
  // Kural 1: Ne≈üeli kar≈üƒ±lama ve tebrikler
  const positiveWords = ["merhaba", "ho≈ü geldin", "harika", "m√ºkemmel", "tebrikler", "ba≈üladƒ±k", "hazƒ±rƒ±m"];
  if (positiveWords.some(word => text.toLowerCase().includes(word))) {
    // Ne≈üeli bir tonla s√∂ylet
    ssmlBody = `<mstts:express-as style="cheerful">${text}</mstts:express-as>`;
  }
  // Kural 2: Sorularƒ± daha doƒüal hale getirme
  else if (text.includes('?')) {
    // Sorunun son kelimesinin perdesini hafif√ße y√ºkselterek doƒüal bir soru tonu ver
    const words = text.split(' ');
    if (words.length >= 3) {
      const questionPart = words.slice(-3).join(' '); // Son 3 kelimeyi al
      const mainPart = words.slice(0, -3).join(' ');
      ssmlBody = `${mainPart} <prosody pitch="+15%">${questionPart}</prosody>`;
    } else {
      ssmlBody = `<prosody pitch="+10%">${text}</prosody>`;
    }
  }
  // Kural 3: Vurgu ekleme (√ñrnek: tƒ±rnak i√ßindeki kelimeler)
  else if (text.includes('"')) {
    // Tƒ±rnak i√ßindeki kelimeleri daha vurgulu yap
    ssmlBody = text.replace(/"([^"]+)"/g, '<emphasis level="strong">$1</emphasis>');
  }
  // Kural 4: √ñnemli kelimeler i√ßin vurgu
  else if (text.toLowerCase().includes('√∂nemli') || text.toLowerCase().includes('dikkat')) {
    ssmlBody = text.replace(/(√∂nemli|dikkat)/gi, '<emphasis level="moderate">$1</emphasis>');
  }

  // Final SSML'i olu≈ütur
  const ssmlString = `
    <speak version="1.0" xmlns="http://www.w3.org/2001/10/synthesis"
           xmlns:mstts="http://www.w3.org/2001/mstts" xml:lang="tr-TR">
      <voice name="${voiceName}">
        <prosody rate="0.95" pitch="+3%">
          ${ssmlBody}
        </prosody>
      </voice>
    </speak>
  `;
  
  return ssmlString;
}

/**
 * ADIM 2: YENƒ∞ AZURE TTS FONKSƒ∞YONU (SSML destekli)
 * Verilen SSML metnini kullanarak Azure'dan y√ºksek kaliteli ses sentezler.
 * PDF'deki en y√ºksek kalite ayarlarƒ± uygulandƒ±.
 */
async function textToSpeechAzureSSML(ssmlString: string): Promise<Buffer | null> {
  try {
    // Azure anahtarlarƒ± kontrol√º
    if (!process.env.AZURE_SPEECH_KEY) {
      console.error("‚ùå Azure Speech Key bulunamadƒ±");
      return null;
    }

    const speechConfig = sdk.SpeechConfig.fromSubscription(
      process.env.AZURE_SPEECH_KEY,
      process.env.AZURE_SPEECH_REGION || "eastus"
    );
    
    // EN Y√úKSEK KALƒ∞TE ƒ∞√áƒ∞N √áIKI≈û FORMATINI AYARLA (PDF'den)
    speechConfig.speechSynthesisOutputFormat = sdk.SpeechSynthesisOutputFormat.Audio48Khz192KBitRateMonoMp3;
    
    // Ses sentezleyiciyi olu≈ütur
    const speechSynthesizer = new sdk.SpeechSynthesizer(speechConfig);

    return new Promise((resolve, reject) => {
      speechSynthesizer.speakSsmlAsync(
        ssmlString,
        (result) => {
          if (result.reason === sdk.ResultReason.SynthesizingAudioCompleted) {
            // Ses verisini Buffer'a √ßevirip geri d√∂nd√ºr
            const audioData = Buffer.from(result.audioData);
            console.log(`‚úÖ Azure TTS SSML (48kHz Premium Kalite) completed`);
            resolve(audioData);
          } else {
            console.error(`‚ùå Azure TTS SSML failed: ${result.errorDetails}`);
            resolve(null);
          }
          speechSynthesizer.close();
        },
        (err) => {
          console.error("‚ùå Azure TTS SSML error:", err);
          speechSynthesizer.close();
          reject(err);
        }
      );
    });
  } catch (error) {
    console.error("‚ùå Azure TTS SSML initialization error:", error);
    return null;
  }
}

export async function speechToText(audioBuffer: Buffer): Promise<string | null> {
  try {
    // Azure anahtarlarƒ± kontrol√º
    if (!process.env.AZURE_SPEECH_KEY) {
      console.warn("‚ö†Ô∏è Azure Speech Key bulunamadƒ± - Mock STT kullanƒ±lƒ±yor");
      return "Mock konu≈üma metni"; // Mock metin
    }

    const speechConfig = sdk.SpeechConfig.fromSubscription(
      process.env.AZURE_SPEECH_KEY,
      process.env.AZURE_SPEECH_REGION || "eastus"
    );

    speechConfig.speechRecognitionLanguage = "tr-TR";

    // Audio stream olu≈ütur
    const pushStream = sdk.AudioInputStream.createPushStream();
    pushStream.write(audioBuffer);
    pushStream.close();

    const audioConfig = sdk.AudioConfig.fromStreamInput(pushStream);
    const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);

    return new Promise((resolve, reject) => {
      recognizer.recognizeOnceAsync(
        (result: sdk.SpeechRecognitionResult) => {
          if (result.reason === sdk.ResultReason.RecognizedSpeech) {
            console.log(`‚úÖ STT completed: "${result.text}"`);
            resolve(result.text);
          } else {
            console.error(`‚ùå STT failed: ${result.errorDetails}`);
            resolve(null);
          }
          recognizer.close();
        },
        (error: any) => {
          console.error("‚ùå STT error:", error);
          recognizer.close();
          reject(error);
        }
      );
    });

  } catch (error) {
    console.error("‚ùå Azure STT initialization error:", error);
    return null;
  }
}